<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Time Anime</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/11.6.1/firebase-storage.js"></script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-image: url('a-vibrant-anime-style-illustration-of-a-_soHTT6AYT9m6JP7n5sZn6A_0tZ8m-SeSj-hU4iTgPB4tg.jpeg');
            background-color: #1a202c; /* Fallback color */
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .bg-overlay {
            background-color: rgba(26, 32, 44, 0.7);
            min-height: 100vh;
            backdrop-filter: blur(5px);
            display: flex;
            flex-direction: column;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 1rem;
            background-color: rgba(31, 41, 55, 0.8);
            position: sticky;
            top: 0;
            z-index: 50;
        }
        .header .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .header .logo svg {
            color: #f56565;
            height: 2rem;
            width: 2rem;
        }
        .header .logo h1 {
            font-size: 1.5rem;
            font-weight: 700;
            background: linear-gradient(45deg, #f56565, #ed8936);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .main-content {
            flex: 1;
            padding: 1rem;
        }
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #1f2937;
            border-top: 1px solid #4a5568;
            display: flex;
            justify-content: space-around;
            padding: 0.5rem 0;
            z-index: 100;
        }
        .bottom-nav a {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-size: 0.75rem;
            color: #a0aec0;
            transition: color 0.2s;
        }
        .bottom-nav a.active {
            color: #fff;
        }
        .bottom-nav a svg {
            height: 1.5rem;
            width: 1.5rem;
            margin-bottom: 0.25rem;
        }
        .bottom-nav a#upload-btn-mobile {
            background-color: #3b82f6;
            color: white;
            border-radius: 50%;
            padding: 1rem;
            position: relative;
            top: -1.5rem;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);
        }
        .video-feed, .series-feed {
            padding: 1rem;
        }
        .filter-tags {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
            overflow-x: auto;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }
        .filter-tags::-webkit-scrollbar {
            display: none;
        }
        .filter-tags button {
            background-color: #4b5563;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            white-space: nowrap;
            font-size: 0.875rem;
            cursor: pointer;
        }
        .filter-tags button:hover {
            background-color: #6b7280;
        }
        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }
        .video-card {
            background-color: rgba(45, 55, 72, 0.9);
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
            cursor: pointer;
            border: 1px solid #4a5568;
        }
        .video-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.25);
        }
        .video-card video {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }
        .video-card-body {
            padding: 1rem;
        }
        .video-card-body h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: #e2e8f0;
            margin-bottom: 0.5rem;
        }
        .video-card-body p {
            font-size: 0.875rem;
            color: #a0aec0;
            line-height: 1.5;
        }
        .upload-modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.8);
            backdrop-filter: blur(5px);
            display: none;
            justify-content: center;
            align-items: center;
        }
        .upload-modal-content {
            background-color: rgba(45, 55, 72, 0.9);
            padding: 2rem;
            border-radius: 1rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
            animation: fadeIn 0.3s;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close-button:hover, .close-button:focus {
            color: #fff;
            text-decoration: none;
            cursor: pointer;
        }
        .form-group {
            margin-bottom: 1rem;
        }
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #cbd5e0;
        }
        .form-group input, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            background-color: #1a202c;
            border: 1px solid #4a5568;
            border-radius: 0.5rem;
            color: #e2e8f0;
            transition: all 0.2s ease-in-out;
        }
        .form-group input:focus, .form-group textarea:focus {
            outline: none;
            border-color: #ecc94b;
            box-shadow: 0 0 0 3px rgba(236, 201, 75, 0.5);
        }
        .submit-btn {
            background: linear-gradient(45deg, #f56565, #ed8936);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            border: none;
        }
        .submit-btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }
        .loading-bar {
            width: 100%;
            background-color: #1a202c;
            border-radius: 9999px;
            margin-top: 1rem;
        }
        .loading-bar-fill {
            height: 8px;
            background-color: #48bb78;
            border-radius: 9999px;
            transition: width 0.3s ease-in-out;
        }
        .tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        .tab-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            background-color: #4a5568;
            color: white;
        }
        .tab-btn.active {
            background-color: #f56565;
        }
        #seriesUploadContainer, #seriesGrid {
            display: none;
        }
        .series-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1.5rem;
        }
        .series-card {
            background-color: rgba(45, 55, 72, 0.9);
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
            cursor: pointer;
            border: 1px solid #4a5568;
        }
        .series-card img {
            width: 100%;
            height: 280px;
            object-fit: cover;
        }
        .series-card-body {
            padding: 1rem;
            text-align: center;
        }
        .series-card-body h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: #e2e8f0;
        }
        .series-detail-view {
            display: none;
            padding: 1rem;
        }
        .episode-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 1rem;
        }
        .episode-card {
            background-color: rgba(45, 55, 72, 0.9);
            border-radius: 0.5rem;
            overflow: hidden;
            border: 1px solid #4a5568;
        }
        .episode-card img {
            width: 100%;
            height: 100px;
            object-fit: cover;
        }
    </style>
</head>
<body>
    <div class="bg-overlay">
        <div class="header">
            <div class="logo">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M23.498 6.186a3.018 3.018 0 00-2.122-2.122C19.045 3.5 12 3.5 12 3.5s-7.045 0-9.376.564a3.018 3.018 0 00-2.122 2.122C.5 8.155.5 12 .5 12s0 3.845.564 6.186a3.018 3.018 0 002.122 2.122C4.955 20.5 12 20.5 12 20.5s7.045 0 9.376-.564a3.018 3.018 0 002.122-2.122C23.5 15.845 23.5 12 23.5 12s0-3.845-.564-5.814zM9.873 15.895V8.105L16.29 12l-6.417 3.895z"/>
                </svg>
                <h1>All Time Anime</h1>
            </div>
            <div class="flex items-center gap-4">
                <button id="uploadBtnDesktop" class="upload-button bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-full hidden md:block">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                </button>
            </div>
        </div>

        <div class="main-content">
            <div id="homeView">
                <div class="filter-tags">
                    <button class="bg-white text-black font-bold">All</button>
                    <button id="animeTag">Anime</button>
                    <button>New Uploads</button>
                    <button>Trending</button>
                    <button>Action</button>
                    <button>Comedy</button>
                </div>
                
                <h2 class="text-xl font-bold mb-4">Videos</h2>
                <div id="videoGrid" class="video-grid">
                    <div id="loadingMessage" class="col-span-full text-center text-lg text-gray-400">Loading videos...</div>
                </div>

                <h2 class="text-xl font-bold mb-4 mt-8">Series</h2>
                <div id="seriesGrid" class="series-grid">
                    <div id="loadingSeriesMessage" class="col-span-full text-center text-lg text-gray-400">Loading series...</div>
                </div>
            </div>

            <div id="seriesDetailView" class="series-detail-view">
                <button id="backToHome" class="mb-4 text-white hover:text-gray-400">&larr; Back to Home</button>
                <div id="seriesDetailContent"></div>
            </div>
        </div>

        <div class="bottom-nav md:hidden">
            <a href="#" class="active">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"/></svg>
                Home
            </a>
            <a href="#">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M2 5a2 2 0 012-2h12a2 2 0 012 2v2a2 2 0 01-2 2H4a2 2 0 01-2-2V5zM2 13a2 2 0 012-2h12a2 2 0 012 2v2a2 2 0 01-2 2H4a2 2 0 01-2-2v-2z"/></svg>
                Shorts
            </a>
            <a href="#" id="upload-btn-mobile">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
            </a>
            <a href="#">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"/></svg>
                Subscriptions
            </a>
            <a href="#">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M12 6a2 2 0 11-4 0 2 2 0 014 0zM14 14a2 2 0 10-4 0 2 2 0 004 0zM12 6h.01M14 14h.01M16 8a2 2 0 11-4 0 2 2 0 014 0zM18 16a2 2 0 10-4 0 2 2 0 004 0zM6 8a2 2 0 11-4 0 2 2 0 014 0zM8 16a2 2 0 10-4 0 2 2 0 004 0zM12 12a2 2 0 11-4 0 2 2 0 014 0zM10 20a2 2 0 100-4 2 2 0 000 4z"/></svg>
                You
            </a>
        </div>

        <!-- Upload Modal -->
        <div id="uploadModal" class="upload-modal">
            <div class="upload-modal-content">
                <span class="close-button">&times;</span>
                <h2 class="text-white text-xl mb-4">Upload Video</h2>
                <div class="tabs">
                    <button id="singleVideoTab" class="tab-btn active">Single Video</button>
                    <button id="seriesTab" class="tab-btn">Series</button>
                </div>

                <form id="uploadForm">
                    <div id="singleVideoUploadContainer">
                        <div class="form-group">
                            <label for="uploadFile">Select a video file</label>
                            <input type="file" id="uploadFile" accept="video/*">
                        </div>
                        <div class="form-group">
                            <label for="uploadTitle">Video Title</label>
                            <input type="text" id="uploadTitle" placeholder="e.g. One Piece: Wano Arc">
                        </div>
                        <div class="form-group">
                            <label for="uploadDescription">Video Description</label>
                            <textarea id="uploadDescription" rows="3" placeholder="A short summary of the video..."></textarea>
                        </div>
                    </div>
                    
                    <div id="seriesUploadContainer">
                         <div class="form-group">
                            <label for="seriesTitle">Series Title</label>
                            <input type="text" id="seriesTitle" placeholder="e.g. Naruto Shippuden">
                        </div>
                        <div class="form-group">
                            <label for="seriesDescription">Series Description</label>
                            <textarea id="seriesDescription" rows="3" placeholder="A short summary of the series..."></textarea>
                        </div>
                        <div class="form-group">
                            <label for="seriesThumbnail">Series Thumbnail</label>
                            <input type="file" id="seriesThumbnail" accept="image/*">
                        </div>
                        <div id="series-episode-upload-container" class="mt-4 hidden">
                            <h3 class="text-white font-semibold mb-2">Upload Episodes</h3>
                            <div class="form-group">
                                <label for="episodeFile">Episode File</label>
                                <input type="file" id="episodeFile" accept="video/*">
                            </div>
                             <div class="form-group">
                                <label for="episodeTitle">Episode Title</label>
                                <input type="text" id="episodeTitle" placeholder="e.g. Episode 1: Homecoming">
                            </div>
                            <div class="form-group">
                                <label for="episodeThumbnail">Episode Thumbnail</label>
                                <input type="file" id="episodeThumbnail" accept="image/*">
                            </div>
                            <button type="button" id="addEpisodeBtn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">Add Episode</button>
                            <ul id="episodeList" class="mt-4 text-sm text-gray-400"></ul>
                        </div>
                    </div>

                    <button type="submit" class="submit-btn w-full mt-4">Upload</button>
                    <div id="uploadStatus" class="mt-4 text-center text-sm"></div>
                    <div class="loading-bar">
                        <div id="progressBar" class="loading-bar-fill" style="width: 0%;"></div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Firebase Scripts -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, orderBy, serverTimestamp, doc, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-storage.js";

        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);
        const storage = getStorage(app);
        
        const uploadBtnDesktop = document.getElementById('uploadBtnDesktop');
        const uploadBtnMobile = document.getElementById('upload-btn-mobile');
        const uploadModal = document.getElementById('uploadModal');
        const closeModal = document.querySelector('.close-button');
        const uploadForm = document.getElementById('uploadForm');
        const videoGrid = document.getElementById('videoGrid');
        const seriesGrid = document.getElementById('seriesGrid');
        const loadingMessage = document.getElementById('loadingMessage');
        const loadingSeriesMessage = document.getElementById('loadingSeriesMessage');
        const uploadStatus = document.getElementById('uploadStatus');
        const progressBar = document.getElementById('progressBar');
        const singleVideoTab = document.getElementById('singleVideoTab');
        const seriesTab = document.getElementById('seriesTab');
        const singleVideoUploadContainer = document.getElementById('singleVideoUploadContainer');
        const seriesUploadContainer = document.getElementById('seriesUploadContainer');
        const addEpisodeBtn = document.getElementById('addEpisodeBtn');
        const episodeList = document.getElementById('episodeList');
        const seriesEpisodeUploadContainer = document.getElementById('series-episode-upload-container');

        let userId;
        let episodes = [];

        async function initAuth() {
            try {
                if (typeof __initial_auth_token !== 'undefined') {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (error) {
                console.error("Firebase Auth Error:", error);
            }
        }

        onAuthStateChanged(auth, async (user) => {
            if (user) {
                userId = user.uid;
                console.log("Authenticated with user ID:", userId);
                await setupFirestoreListeners();
            } else {
                console.log("No user is signed in.");
            }
        });

        async function setupFirestoreListeners() {
            try {
                const videosRef = collection(db, `/artifacts/${appId}/users/${userId}/videos`);
                const qVideos = query(videosRef, orderBy("createdAt", "desc"));
                
                onSnapshot(qVideos, (snapshot) => {
                    const videos = [];
                    snapshot.forEach((doc) => {
                        videos.push({ id: doc.id, ...doc.data() });
                    });
                    renderVideos(videos);
                });

                const seriesRef = collection(db, `/artifacts/${appId}/users/${userId}/series`);
                const qSeries = query(seriesRef, orderBy("createdAt", "desc"));

                onSnapshot(qSeries, (snapshot) => {
                    const series = [];
                    snapshot.forEach((doc) => {
                        series.push({ id: doc.id, ...doc.data() });
                    });
                    renderSeries(series);
                });
            } catch (e) {
                console.error("Error setting up Firestore listeners: ", e);
            }
        }
        
        uploadBtnDesktop.addEventListener('click', () => {
            uploadModal.style.display = 'flex';
        });

        uploadBtnMobile.addEventListener('click', (e) => {
            e.preventDefault();
            uploadModal.style.display = 'flex';
        });

        closeModal.addEventListener('click', () => {
            uploadModal.style.display = 'none';
        });

        window.addEventListener('click', (event) => {
            if (event.target == uploadModal) {
                uploadModal.style.display = 'none';
            }
        });

        singleVideoTab.addEventListener('click', () => {
            singleVideoTab.classList.add('active');
            seriesTab.classList.remove('active');
            singleVideoUploadContainer.style.display = 'block';
            seriesUploadContainer.style.display = 'none';
            uploadForm.reset();
            episodes = [];
            episodeList.innerHTML = '';
        });

        seriesTab.addEventListener('click', () => {
            seriesTab.classList.add('active');
            singleVideoTab.classList.remove('active');
            singleVideoUploadContainer.style.display = 'none';
            seriesUploadContainer.style.display = 'block';
            uploadForm.reset();
            episodes = [];
            episodeList.innerHTML = '';
            seriesEpisodeUploadContainer.classList.remove('hidden');
        });

        addEpisodeBtn.addEventListener('click', () => {
            const episodeFile = document.getElementById('episodeFile').files[0];
            const episodeTitle = document.getElementById('episodeTitle').value;
            const episodeThumbnailFile = document.getElementById('episodeThumbnail').files[0];

            if (episodeFile && episodeTitle && episodeThumbnailFile) {
                episodes.push({ file: episodeFile, title: episodeTitle, thumbnail: episodeThumbnailFile });
                const li = document.createElement('li');
                li.textContent = `Episode: ${episodeTitle}`;
                episodeList.appendChild(li);
                document.getElementById('episodeFile').value = null;
                document.getElementById('episodeTitle').value = '';
                document.getElementById('episodeThumbnail').value = null;
            } else {
                uploadStatus.textContent = 'Please fill in all episode details.';
            }
        });

        uploadForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (singleVideoTab.classList.contains('active')) {
                await uploadSingleVideo();
            } else {
                await uploadSeries();
            }
        });

        async function uploadSingleVideo() {
            const file = document.getElementById('uploadFile').files[0];
            const title = document.getElementById('uploadTitle').value;
            const description = document.getElementById('uploadDescription').value;

            if (!file || !title) {
                uploadStatus.textContent = 'Please provide a file and title.';
                return;
            }
            
            await uploadFileAndSaveToFirestore(file, title, description, 'videos');
        }

        async function uploadSeries() {
            const seriesTitle = document.getElementById('seriesTitle').value;
            const seriesDescription = document.getElementById('seriesDescription').value;
            const seriesThumbnailFile = document.getElementById('seriesThumbnail').files[0];

            if (!seriesTitle || !seriesThumbnailFile) {
                uploadStatus.textContent = 'Please provide a series title and thumbnail.';
                return;
            }

            if (episodes.length === 0) {
                 uploadStatus.textContent = 'Please add at least one episode.';
                return;
            }
            
            uploadStatus.textContent = "Starting series upload...";
            progressBar.style.width = '0%';
            
            const seriesThumbnailRef = ref(storage, `/artifacts/${appId}/users/${userId}/series_thumbnails/${seriesThumbnailFile.name}`);
            const uploadTaskThumbnail = uploadBytesResumable(seriesThumbnailRef, seriesThumbnailFile);

            await new Promise((resolve, reject) => {
                uploadTaskThumbnail.on('state_changed', 
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        progressBar.style.width = `${progress}%`;
                        uploadStatus.textContent = `Uploading thumbnail: ${progress.toFixed(2)}%`;
                    }, 
                    (error) => {
                        reject(error);
                    }, 
                    () => {
                        resolve();
                    }
                );
            });
            
            const seriesThumbnailURL = await getDownloadURL(uploadTaskThumbnail.snapshot.ref);

            const episodesData = [];
            for (const episode of episodes) {
                 const episodeRef = ref(storage, `/artifacts/${appId}/users/${userId}/series_episodes/${episode.file.name}`);
                 const uploadTaskEpisode = uploadBytesResumable(episodeRef, episode.file);
                 await new Promise((resolve, reject) => {
                    uploadTaskEpisode.on('state_changed',
                        (snapshot) => {
                           const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                           progressBar.style.width = `${progress}%`;
                           uploadStatus.textContent = `Uploading episode: ${episode.title} - ${progress.toFixed(2)}%`;
                        },
                        (error) => { reject(error); },
                        () => { resolve(); }
                    );
                 });
                 const episodeURL = await getDownloadURL(uploadTaskEpisode.snapshot.ref);

                 const thumbnailRef = ref(storage, `/artifacts/${appId}/users/${userId}/episode_thumbnails/${episode.thumbnail.name}`);
                 const uploadTaskThumbnail = uploadBytesResumable(thumbnailRef, episode.thumbnail);
                 await new Promise((resolve, reject) => {
                     uploadTaskThumbnail.on('state_changed',
                        (snapshot) => {
                            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                            progressBar.style.width = `${progress}%`;
                            uploadStatus.textContent = `Uploading episode thumbnail: ${episode.title} - ${progress.toFixed(2)}%`;
                        },
                        (error) => { reject(error); },
                        () => { resolve(); }
                     );
                 });
                 const thumbnailURL = await getDownloadURL(uploadTaskThumbnail.snapshot.ref);

                 episodesData.push({ title: episode.title, url: episodeURL, thumbnail: thumbnailURL });
            }

            const seriesRef = collection(db, `/artifacts/${appId}/users/${userId}/series`);
            await addDoc(seriesRef, {
                title: seriesTitle,
                description: seriesDescription,
                thumbnail: seriesThumbnailURL,
                episodes: episodesData,
                createdAt: serverTimestamp()
            });

            uploadStatus.textContent = 'Series uploaded successfully!';
            uploadForm.reset();
            progressBar.style.width = '0%';
            episodes = [];
            episodeList.innerHTML = '';
            setTimeout(() => {
                uploadModal.style.display = 'none';
            }, 1500);
        }

        async function uploadFileAndSaveToFirestore(file, title, description, collectionName) {
            const storageRef = ref(storage, `/artifacts/${appId}/users/${userId}/${collectionName}/${file.name}`);
            const uploadTask = uploadBytesResumable(storageRef, file);

            uploadStatus.textContent = "Starting upload...";
            progressBar.style.width = '0%';

            uploadTask.on('state_changed', 
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    progressBar.style.width = `${progress}%`;
                    uploadStatus.textContent = `Uploading: ${progress.toFixed(2)}%`;
                }, 
                (error) => {
                    uploadStatus.textContent = `Upload failed: ${error.message}`;
                    console.error("Upload error:", error);
                }, 
                () => {
                    getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {
                        try {
                            const ref = collection(db, `/artifacts/${appId}/users/${userId}/${collectionName}`);
                            await addDoc(ref, {
                                url: downloadURL,
                                title: title,
                                description: description,
                                createdAt: serverTimestamp()
                            });
                            uploadStatus.textContent = 'Video uploaded successfully!';
                            uploadForm.reset();
                            progressBar.style.width = '0%';
                            setTimeout(() => {
                                uploadModal.style.display = 'none';
                            }, 1500);
                        } catch (e) {
                            uploadStatus.textContent = `Error adding data to database: ${e.message}`;
                            console.error("Error adding document: ", e);
                        }
                    });
                }
            );
        }

        function renderVideos(videos) {
            videoGrid.innerHTML = '';
            loadingMessage.style.display = 'none';

            if (videos.length === 0) {
                videoGrid.innerHTML = '<p class="text-center text-gray-400 col-span-full">No videos found. Upload a video!</p>';
                return;
            }

            videos.forEach(video => {
                const videoCard = `
                    <div class="video-card">
                        <video controls class="w-full">
                            <source src="${video.url}" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <div class="video-card-body">
                            <h3>${video.title}</h3>
                            <p>${video.description}</p>
                        </div>
                    </div>
                `;
                videoGrid.innerHTML += videoCard;
            });
        }

        function renderSeries(series) {
            seriesGrid.innerHTML = '';
            loadingSeriesMessage.style.display = 'none';

            if (series.length === 0) {
                seriesGrid.innerHTML = '<p class="text-center text-gray-400 col-span-full">No series found. Upload a series!</p>';
                return;
            }

            series.forEach(item => {
                const seriesCard = `
                    <div class="series-card" data-series-id="${item.id}">
                        <img src="${item.thumbnail}" alt="${item.title} Thumbnail">
                        <div class="series-card-body">
                            <h3>${item.title}</h3>
                        </div>
                    </div>
                `;
                seriesGrid.innerHTML += seriesCard;
            });
            
            document.querySelectorAll('.series-card').forEach(card => {
                card.addEventListener('click', (e) => {
                    const seriesId = e.currentTarget.dataset.seriesId;
                    const selectedSeries = series.find(s => s.id === seriesId);
                    if (selectedSeries) {
                        renderSeriesDetailView(selectedSeries);
                    }
                });
            });
        }

        function renderSeriesDetailView(series) {
            document.getElementById('homeView').style.display = 'none';
            document.getElementById('seriesDetailView').style.display = 'block';
            const detailContent = document.getElementById('seriesDetailContent');
            detailContent.innerHTML = `
                <div class="flex flex-col md:flex-row gap-4 mb-4">
                    <img src="${series.thumbnail}" alt="${series.title}" class="w-full md:w-1/3 rounded-lg">
                    <div>
                        <h1 class="text-2xl font-bold mb-2">${series.title}</h1>
                        <p class="text-gray-400 mb-4">${series.description}</p>
                    </div>
                </div>
                <h2 class="text-xl font-bold mb-4">Episodes</h2>
                <div class="episode-grid">
                    ${series.episodes.map(ep => `
                        <div class="episode-card">
                            <img src="${ep.thumbnail}" alt="${ep.title} Thumbnail">
                            <div class="p-2">
                                <h4 class="text-sm font-semibold">${ep.title}</h4>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }
        
        document.getElementById('backToHome').addEventListener('click', () => {
             document.getElementById('homeView').style.display = 'block';
             document.getElementById('seriesDetailView').style.display = 'none';
        });

        initAuth();
    </script>
</body>
</html>